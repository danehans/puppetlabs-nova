diff -r -N -u3 a/flags.py b/flags.py
--- a/flags.py 2012-08-02 01:34:23.725950885 +0000
+++ b/flags.py 2012-08-02 01:34:10.914851304 +0000
@@ -195,6 +195,9 @@
     cfg.IntOpt('rabbit_port',
                default=5672,
                help='the RabbitMQ port'),
+    cfg.ListOpt('rabbit_addresses',
+               default=['$rabbit_host:$rabbit_port'],
+               help='RabbitMQ HA cluster host:port pairs'),
     cfg.BoolOpt('rabbit_use_ssl',
                 default=False,
                 help='connect over SSL for RabbitMQ'),
diff -r -N -u3 a/rpc/impl_kombu.py b/rpc/impl_kombu.py
--- a/rpc/impl_kombu.py    2012-08-01 23:18:25.832654796 +0000
+++ b/rpc/impl_kombu.py    2012-08-01 23:20:56.941282534 +0000
@@ -77,6 +77,7 @@
         """Re-declare the queue after a rabbit reconnect"""
         self.channel = channel
         self.kwargs['channel'] = channel
+        self.kwargs['queue_arguments'] = {'x-ha-policy': 'all'}
         self.queue = kombu.entity.Queue(**self.kwargs)
         self.queue.declare()
 
@@ -348,27 +349,28 @@
         # Keys to translate from server_params to kombu params
         server_params_to_kombu_params = {'username': 'userid'}
 
-        params = {}
-        for sp_key, value in server_params.iteritems():
-            p_key = server_params_to_kombu_params.get(sp_key, sp_key)
-            params[p_key] = value
-
-        params.setdefault('hostname', FLAGS.rabbit_host)
-        params.setdefault('port', FLAGS.rabbit_port)
-        params.setdefault('userid', FLAGS.rabbit_userid)
-        params.setdefault('password', FLAGS.rabbit_password)
-        params.setdefault('virtual_host', FLAGS.rabbit_virtual_host)
-
-        self.params = params
-
-        if FLAGS.fake_rabbit:
-            self.params['transport'] = 'memory'
-            self.memory_transport = True
-        else:
-            self.memory_transport = False
+        params_list = []
+        for adr in FLAGS.rabbit_addresses:
+            hostname, port = adr.split(':')
+            params = {}
+            for sp_key, value in server_params.iteritems():
+                p_key = server_params_to_kombu_params.get(sp_key, sp_key)
+                params[p_key] = value
+            params.setdefault('hostname', hostname)
+            params.setdefault('port', int(port))
+            params.setdefault('userid', FLAGS.rabbit_userid)
+            params.setdefault('password', FLAGS.rabbit_password)
+            params.setdefault('virtual_host', FLAGS.rabbit_virtual_host)
+            if FLAGS.fake_rabbit:
+                params['transport'] = 'memory'
+            if FLAGS.rabbit_use_ssl:
+                params['ssl'] = self._fetch_ssl_params()
+
+            params_list.append(params)
+
+        self.params_list = params_list
 
-        if FLAGS.rabbit_use_ssl:
-            self.params['ssl'] = self._fetch_ssl_params()
+        self.memory_transport = FLAGS.fake_rabbit
 
         self.connection = None
         self.reconnect()
@@ -398,14 +400,14 @@
             # Return the extended behavior
             return ssl_params
 
-    def _connect(self):
+    def _connect(self, params):
         """Connect to rabbit.  Re-establish any queues that may have
         been declared before if we are reconnecting.  Exceptions should
         be handled by the caller.
         """
         if self.connection:
             LOG.info(_("Reconnecting to AMQP server on "
-                    "%(hostname)s:%(port)d") % self.params)
+                    "%(hostname)s:%(port)d") % params)
             try:
                 self.connection.close()
             except self.connection_errors:
@@ -414,7 +416,7 @@
             # it shouldn't be doing any network operations, yet.
             self.connection = None
         self.connection = kombu.connection.BrokerConnection(
-                **self.params)
+                **params)
         self.connection_errors = self.connection.connection_errors
         if self.memory_transport:
             # Kludge to speed up tests.
@@ -428,7 +430,7 @@
         for consumer in self.consumers:
             consumer.reconnect(self.channel)
         LOG.info(_('Connected to AMQP server on '
-                '%(hostname)s:%(port)d') % self.params)
+                '%(hostname)s:%(port)d') % params)
 
     def reconnect(self):
         """Handles reconnecting and re-establishing queues.
@@ -441,11 +443,12 @@
 
         attempt = 0
         while True:
+            params = self.params_list[attempt % len(self.params_list)]
             attempt += 1
             try:
-                self._connect()
+                self._connect(params)
                 return
-            except (self.connection_errors, IOError), e:
+            except (IOError, self.connection_errors) as e:
                 pass
             except Exception, e:
                 # NOTE(comstud): Unfortunately it's possible for amqplib
@@ -460,7 +463,7 @@
             log_info = {}
             log_info['err_str'] = str(e)
             log_info['max_retries'] = self.max_retries
-            log_info.update(self.params)
+            log_info.update(params)
 
             if self.max_retries and attempt == self.max_retries:
                 LOG.exception(_('Unable to connect to AMQP server on '
diff -r -N -u3 a/utils.py b/utils.py
--- a/utils.py 2012-08-01 23:19:04.865837288 +0000
+++ b/utils.py 2012-08-01 23:20:08.772780933 +0000
@@ -986,7 +986,7 @@
         return
 
     hostname = socket.gethostname()
-    sentinel_re = hostname + r'\..*-(\d+$)'
+    sentinel_re = hostname + r'-.*\.(\d+$)'
     lockfile_re = r'nova-.*\.lock'
     files = os.listdir(FLAGS.lock_path)
 
